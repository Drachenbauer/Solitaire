[gd_scene load_steps=5 format=2]

[ext_resource path="res://assets/graphics/decks/classic/2_identifiers/deck_1.png" type="Texture" id=1]
[ext_resource path="res://assets/graphics/backs/classic_1.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D


# Declare member variables here:
const CARD_SIZE = Vector2(72, 96)

var value
var suit
var id
var color
var containing_stack
var old_pos
var child = null
var is_open = false
var is_picked = false

onready var front = $Front
onready var back = $Back
onready var tween = $Tween

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta):
	follow_mouse()


func set_card_type():
	var region_pos = id * CARD_SIZE
	front.texture = load(G.deck_texture_path)
	front.region_rect = Rect2(region_pos, CARD_SIZE)
	back.texture = load(G.back_texture_path)


func storage_flip_open():
	var flip_open =  get_tree().root.get_child(1).flip_open
	change_parent(G.flip_open_stack, flip_open)
	add_to_stack(G.flip_open_stack)
	show_front()


func hold_card():
	old_pos = position
	z_as_relative = false
	z_index = VisualServer.CANVAS_ITEM_Z_MAX
	is_picked = true


func release_card():
	var targets = get_tree().root.get_child(1).targets
	var bottoms = get_tree().root.get_child(1).bottoms
	var mouse_position = get_viewport().get_mouse_position()
	
	for stack_id in G.target_stacks:
		var stack = G.target_stacks[stack_id]
		var bool_1 = mouse_position.x > targets[stack_id].global_position.x - 37
		var bool_2 = mouse_position.x < targets[stack_id].global_position.x + 37
		var bool_3 = mouse_position.y > targets[stack_id].global_position.y - 49
		var bool_4 = mouse_position.y < targets[stack_id].global_position.y + 49
		
		if bool_1 && bool_2 && bool_3 && bool_4:
			if child == null:
				if suit == stack_id:
					if G.VALUES.find(value) == stack.size():
						position = Vector2(0, 0)
						change_parent(stack, targets[stack_id])
						add_to_stack(stack)
						values_to_default()
						check_for_solve()
						return
	
	for stack in G.bottom_stacks:
		var stack_id = G.bottom_stacks.find(stack)
		var bool_1
		var bool_2
		var bool_3
		var bool_4
		var last_card
		
		if stack.size() == 0:
			bool_1 = mouse_position.x > bottoms[stack_id].global_position.x - 37
			bool_2 = mouse_position.x < bottoms[stack_id].global_position.x + 37
			bool_3 = mouse_position.y > bottoms[stack_id].global_position.y - 49
			bool_4 = mouse_position.y < bottoms[stack_id].global_position.y + 49
		else:
			last_card = stack[stack.size() - 1]
			bool_1 = mouse_position.x > last_card.global_position.x - 37
			bool_2 = mouse_position.x < last_card.global_position.x + 37
			bool_3 = mouse_position.y > last_card.global_position.y - 49
			bool_4 = mouse_position.y < last_card.global_position.y + 49
		
		if bool_1 && bool_2 && bool_3 && bool_4:
			if stack.size() == 0:
				position = Vector2(0, 0)
				change_parent(stack, bottoms[stack_id])
				add_to_stack(stack)
				values_to_default()
				return
			else:
				if last_card.is_open:
					if last_card.color != color:
						if G.VALUES.find(value) == G.VALUES.find(stack[stack.size() - 1].value) - 1:
							position = Vector2(0, 16)
							change_parent(stack, last_card)
							add_to_stack(stack)
							values_to_default()
							return
				else:
					position = Vector2(0, 8)
					change_parent(stack, last_card)
					add_to_stack(stack)
					values_to_default()
					return
	
	slide_to(old_pos)
	values_to_default()


func send_to_target():
	var targets = get_tree().root.get_child(1).targets
	
	for stack_id in G.target_stacks:
		var stack = G.target_stacks[stack_id]
		
		if suit == stack_id:
			if G.VALUES.find(value) == stack.size():
				position = Vector2(0, 0)
				change_parent(stack, targets[stack_id])
				add_to_stack(stack)
				values_to_default()
				G.is_card_sliding = false
				check_for_solve()


func show_front():
	is_open = true
	back.visible = !is_open


func show_back():
	is_open = false
	back.visible = !is_open


func change_parent(stack, parent):
	if G.bottom_stacks.has(containing_stack) && containing_stack.find(self) > 0:
		get_parent().child = null
	
	if G.bottom_stacks.has(stack) && stack.size() > 0:
		parent.child = self
	
	get_parent().remove_child(self)
	parent.add_child(self)


func add_to_stack(stack):
	stack.append(self)
	containing_stack.erase(self)
	containing_stack = stack
		
	if child != null:
		child.add_to_stack(stack)


func values_to_default():
	z_as_relative = true
	z_index = 0
	is_picked = false


func follow_mouse():
	if is_picked:
		var mouse_position = get_viewport().get_mouse_position()
		global_position = mouse_position + Vector2(0, 40)


func slide_to(target_pos):
	G.is_card_sliding = true
	tween.interpolate_property(self, \"position\",
	position, target_pos, 0.1,
	Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
	tween.start()
	yield(tween,\"tween_completed\")
	G.is_card_sliding = false


func check_for_solve():
	if G.is_solved():
		get_tree().root.get_child(1).solved.show()
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 36, 48 )

[node name="Card" type="Area2D" groups=["cards"]]
monitoring = false
monitorable = false
script = SubResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )

[node name="Front" type="Sprite" parent="."]
texture = ExtResource( 1 )
region_enabled = true
region_rect = Rect2( 841, 38, 0, 0 )

[node name="Back" type="Sprite" parent="."]
texture = ExtResource( 2 )

[node name="Tween" type="Tween" parent="."]
